// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using crystalCLAIMSAPI.Data;

namespace crystalCLAIMSAPI.Migrations
{
    [DbContext(typeof(CrystalCLAIMSDbContext))]
    [Migration("20180929043621_ClaimsRelations")]
    partial class ClaimsRelations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("crystalCLAIMSAPI.Models.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<decimal?>("ApprovedAmount");

                    b.Property<decimal?>("BillAmount");

                    b.Property<int?>("CheckerId");

                    b.Property<string>("ClaimComment");

                    b.Property<DateTime?>("ClaimInitiationDate");

                    b.Property<int>("ClaimStatus");

                    b.Property<string>("DoctorNumber");

                    b.Property<DateTime?>("HCPApprovalDate");

                    b.Property<bool?>("HCPApprovalStatus");

                    b.Property<int?>("HCPApproverId");

                    b.Property<int?>("HCPInputerId");

                    b.Property<int?>("HealthcareProviderId");

                    b.Property<string>("HospitalizationEvent");

                    b.Property<string>("IPFirstApprovalComment");

                    b.Property<bool?>("IPFirstApprovalStatus");

                    b.Property<DateTime?>("IPFirstApproverChangeDate");

                    b.Property<int?>("IPFirstApproverId");

                    b.Property<string>("IPSecondApprovalComment");

                    b.Property<bool?>("IPSecondApprovalStatus");

                    b.Property<DateTime?>("IPSecondApproverChangeDate");

                    b.Property<int?>("IPSecondApproverId");

                    b.Property<int?>("MakerId");

                    b.Property<int?>("MemberId");

                    b.Property<string>("NameOfDoctor");

                    b.Property<DateTime?>("RejectionDate");

                    b.Property<DateTime>("SubmissionDate");

                    b.HasKey("Id");

                    b.HasIndex("HCPApproverId");

                    b.HasIndex("HCPInputerId");

                    b.HasIndex("HealthcareProviderId");

                    b.HasIndex("IPFirstApproverId");

                    b.HasIndex("IPSecondApproverId");

                    b.HasIndex("MemberId");

                    b.ToTable("CCT_Claims");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.ClaimDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClaimId");

                    b.Property<int>("HCPDiagnosisId");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("HCPDiagnosisId");

                    b.ToTable("CCT_ClaimDiagnosis");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.ClaimDoctors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClaimId");

                    b.Property<int>("HCPDoctorId");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("HCPDoctorId");

                    b.ToTable("CCT_ClaimDoctors");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.ClaimDrugs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClaimId");

                    b.Property<int>("HCPDrugId");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("HCPDrugId");

                    b.ToTable("CCT_ClaimDrugs");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.ClaimServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClaimId");

                    b.Property<int>("HCPServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("HCPServiceId");

                    b.ToTable("CCT_ClaimServices");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<int?>("CheckerId");

                    b.Property<string>("DistrictName");

                    b.Property<int?>("MakerId");

                    b.Property<int>("ProvinceId");

                    b.Property<DateTime?>("RejectionDate");

                    b.Property<DateTime>("SubmissionDate");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("CCT_Districts");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.HCPDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<int?>("CheckerId");

                    b.Property<int>("HealthcareProviderId");

                    b.Property<int?>("MakerId");

                    b.Property<double>("Price");

                    b.Property<DateTime?>("RejectionDate");

                    b.Property<int>("StandardDiagnosisId");

                    b.Property<DateTime>("SubmissionDate");

                    b.HasKey("Id");

                    b.HasIndex("HealthcareProviderId");

                    b.HasIndex("StandardDiagnosisId");

                    b.ToTable("CCT_HCPDiagnosis");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.HCPDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<int?>("CheckerId");

                    b.Property<string>("HCPEmployeeId");

                    b.Property<int>("HealthcareProviderId");

                    b.Property<int?>("MakerId");

                    b.Property<int>("MedicalPersonnelId");

                    b.Property<DateTime?>("RejectionDate");

                    b.Property<DateTime>("SubmissionDate");

                    b.HasKey("Id");

                    b.HasIndex("HealthcareProviderId");

                    b.HasIndex("MedicalPersonnelId");

                    b.ToTable("CCT_HCPDoctors");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.HCPDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<int?>("CheckerId");

                    b.Property<int>("HealthcareProviderId");

                    b.Property<int?>("MakerId");

                    b.Property<double>("Price");

                    b.Property<DateTime?>("RejectionDate");

                    b.Property<int>("StandardDrugId");

                    b.Property<DateTime>("SubmissionDate");

                    b.HasKey("Id");

                    b.HasIndex("HealthcareProviderId");

                    b.HasIndex("StandardDrugId");

                    b.ToTable("CCT_HCPDrugs");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.HCPService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<int?>("CheckerId");

                    b.Property<int>("HealthcareProviderId");

                    b.Property<int?>("MakerId");

                    b.Property<double>("Price");

                    b.Property<DateTime?>("RejectionDate");

                    b.Property<int>("StandardServiceProvidedId");

                    b.Property<DateTime>("SubmissionDate");

                    b.HasKey("Id");

                    b.HasIndex("HealthcareProviderId");

                    b.HasIndex("StandardServiceProvidedId");

                    b.ToTable("CCT_HCPServices");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.HCPUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<string>("AspNetUserId");

                    b.Property<int?>("CheckerId");

                    b.Property<string>("Firstname");

                    b.Property<int>("HCPId");

                    b.Property<int?>("HealthcareProviderId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsAdmin");

                    b.Property<string>("Lastname");

                    b.Property<int?>("MakerId");

                    b.Property<DateTime?>("RejectionDate");

                    b.Property<DateTime>("SubmissionDate");

                    b.HasKey("Id");

                    b.HasIndex("HealthcareProviderId");

                    b.ToTable("CCT_HCPUsers");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.HealthcareProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<int?>("CheckerId");

                    b.Property<int>("DistrictId");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Fax");

                    b.Property<DateTime?>("JoiningDate");

                    b.Property<int?>("MakerId");

                    b.Property<string>("PostalCode");

                    b.Property<string>("ProviderCode");

                    b.Property<string>("ProviderName");

                    b.Property<DateTime?>("RejectionDate");

                    b.Property<string>("Status");

                    b.Property<DateTime>("SubmissionDate");

                    b.Property<string>("Telephone1");

                    b.Property<string>("Telephone2");

                    b.Property<string>("Telephone3");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("CCT_HealthcareProviders");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.InsuranceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<int?>("CheckerId");

                    b.Property<int>("DistrictId");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Fax");

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("MakerId");

                    b.Property<string>("PostalCode");

                    b.Property<string>("ProviderCode");

                    b.Property<string>("ProviderName");

                    b.Property<DateTime?>("RejectionDate");

                    b.Property<DateTime>("SubmissionDate");

                    b.Property<string>("Telephone1");

                    b.Property<string>("Telephone2");

                    b.Property<string>("Telephone3");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("CCT_InsuranceProviders");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.IPUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<string>("AspNetUserId");

                    b.Property<int?>("CheckerId");

                    b.Property<string>("Firstname");

                    b.Property<int?>("InsuranceProviderId");

                    b.Property<int>("Ipid");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsAdmin");

                    b.Property<string>("Lastname");

                    b.Property<int?>("MakerId");

                    b.Property<DateTime?>("RejectionDate");

                    b.Property<DateTime>("SubmissionDate");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceProviderId");

                    b.ToTable("CCT_IPUsers");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.MedicalPersonnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<int?>("CheckerId");

                    b.Property<string>("Firstname");

                    b.Property<string>("Lastname");

                    b.Property<int?>("MakerId");

                    b.Property<string>("PracticingId");

                    b.Property<string>("Qualifications");

                    b.Property<DateTime?>("RejectionDate");

                    b.Property<DateTime>("SubmissionDate");

                    b.HasKey("Id");

                    b.ToTable("CCT_MedicalPersonnel");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AnnualLimit");

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<int?>("CheckerId");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("EmployeeNo");

                    b.Property<string>("Firstname");

                    b.Property<string>("Gender");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Lastname");

                    b.Property<int?>("MakerId");

                    b.Property<DateTime?>("MemberSince");

                    b.Property<string>("NationalId");

                    b.Property<int>("PolicyHolderId");

                    b.Property<DateTime?>("RejectionDate");

                    b.Property<int>("RelationshipType");

                    b.Property<DateTime>("SubmissionDate");

                    b.Property<decimal?>("UtilizedTillDate");

                    b.HasKey("Id");

                    b.HasIndex("PolicyHolderId");

                    b.ToTable("CCT_Members");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.PolicyHolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<int?>("CheckerId");

                    b.Property<string>("Email");

                    b.Property<int?>("InsuranceProviderId");

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("MakerId");

                    b.Property<string>("PolicyHolderName");

                    b.Property<string>("PolicyNumber");

                    b.Property<DateTime?>("RejectionDate");

                    b.Property<string>("Status");

                    b.Property<DateTime>("SubmissionDate");

                    b.Property<string>("Telehpone1");

                    b.Property<string>("Telephone");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceProviderId");

                    b.ToTable("CCT_PolicyHolders");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate");

                    b.Property<int?>("CheckerId");

                    b.Property<int?>("MakerId");

                    b.Property<string>("ProvinceName");

                    b.Property<DateTime?>("RejectionDate");

                    b.Property<DateTime>("SubmissionDate");

                    b.HasKey("Id");

                    b.ToTable("CCT_Provinces");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.StandardDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Comment");

                    b.Property<string>("Description");

                    b.Property<string>("LongName");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("CCT_StandardDiagnosis");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.StandardDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Comment");

                    b.Property<string>("Description");

                    b.Property<string>("LongName");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("CCT_StandardDrugs");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.StandardServiceProvided", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Comment");

                    b.Property<string>("Description");

                    b.Property<string>("LongName");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("CCT_StandardServiceProvided");
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.Claim", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.HCPUser", "HCPApprover")
                        .WithMany("ClaimsHCPApprovers")
                        .HasForeignKey("HCPApproverId");

                    b.HasOne("crystalCLAIMSAPI.Models.HCPUser", "HCPInputer")
                        .WithMany("ClaimsHCPInputers")
                        .HasForeignKey("HCPInputerId");

                    b.HasOne("crystalCLAIMSAPI.Models.HealthcareProvider", "HCP")
                        .WithMany("Claims")
                        .HasForeignKey("HealthcareProviderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("crystalCLAIMSAPI.Models.IPUser", "IPFirstApprover")
                        .WithMany("ClaimsIPFirstApprovers")
                        .HasForeignKey("IPFirstApproverId");

                    b.HasOne("crystalCLAIMSAPI.Models.IPUser", "IPSecondApprover")
                        .WithMany("ClaimsIPSecondApprovers")
                        .HasForeignKey("IPSecondApproverId");

                    b.HasOne("crystalCLAIMSAPI.Models.Member", "Member")
                        .WithMany("Claims")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.ClaimDiagnosis", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.Claim", "Claim")
                        .WithMany("ClaimDiagnosis")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("crystalCLAIMSAPI.Models.HCPDiagnosis", "HCPDiagnosis")
                        .WithMany("ClaimDiagnoses")
                        .HasForeignKey("HCPDiagnosisId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.ClaimDoctors", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.Claim", "Claim")
                        .WithMany("ClaimDoctors")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("crystalCLAIMSAPI.Models.HCPDoctor", "HCPDoctor")
                        .WithMany("ClaimDoctors")
                        .HasForeignKey("HCPDoctorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.ClaimDrugs", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.Claim", "Claim")
                        .WithMany("ClaimDrugs")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("crystalCLAIMSAPI.Models.HCPDrug", "HCPDrug")
                        .WithMany("ClaimDrugs")
                        .HasForeignKey("HCPDrugId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.ClaimServices", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.Claim", "Claim")
                        .WithMany("ClaimServices")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("crystalCLAIMSAPI.Models.HCPService", "HCPService")
                        .WithMany("ClaimServices")
                        .HasForeignKey("HCPServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.District", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.HCPDiagnosis", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.HealthcareProvider", "HealthcareProvider")
                        .WithMany("Diagnosis")
                        .HasForeignKey("HealthcareProviderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("crystalCLAIMSAPI.Models.StandardDiagnosis", "StandardDiagnosis")
                        .WithMany("HCPDiagnoses")
                        .HasForeignKey("StandardDiagnosisId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.HCPDoctor", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.HealthcareProvider", "HCP")
                        .WithMany("HCPDoctors")
                        .HasForeignKey("HealthcareProviderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("crystalCLAIMSAPI.Models.MedicalPersonnel", "MedicalPersonnel")
                        .WithMany("HCPDoctors")
                        .HasForeignKey("MedicalPersonnelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.HCPDrug", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.HealthcareProvider", "HealthcareProvider")
                        .WithMany("Drugs")
                        .HasForeignKey("HealthcareProviderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("crystalCLAIMSAPI.Models.StandardDrug", "StandardDrug")
                        .WithMany("HCPDrugs")
                        .HasForeignKey("StandardDrugId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.HCPService", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.HealthcareProvider", "HealthcareProvider")
                        .WithMany("Services")
                        .HasForeignKey("HealthcareProviderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("crystalCLAIMSAPI.Models.StandardServiceProvided", "StandardServiceProvided")
                        .WithMany("HCPServices")
                        .HasForeignKey("StandardServiceProvidedId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.HCPUser", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.HealthcareProvider", "HealthcareProvider")
                        .WithMany("HCPUsers")
                        .HasForeignKey("HealthcareProviderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.HealthcareProvider", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.District", "District")
                        .WithMany("HealthcareProviders")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.InsuranceProvider", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.District", "District")
                        .WithMany("InsuranceProviders")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.IPUser", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.InsuranceProvider", "InsuranceProvider")
                        .WithMany("IPUsers")
                        .HasForeignKey("InsuranceProviderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.Member", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.PolicyHolder", "PolicyHolder")
                        .WithMany("Members")
                        .HasForeignKey("PolicyHolderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("crystalCLAIMSAPI.Models.PolicyHolder", b =>
                {
                    b.HasOne("crystalCLAIMSAPI.Models.InsuranceProvider", "InsuranceProvider")
                        .WithMany("PolicyHolders")
                        .HasForeignKey("InsuranceProviderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
